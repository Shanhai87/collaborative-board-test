// import cors from "cors";
// import express from "express";
// import { PrismaClient } from "@prisma/client";
// import bcrypt from "bcryptjs";
// import jwt from "jsonwebtoken";
// import dotenv from "dotenv";
// import { z } from "zod";
// import nodemailer from "nodemailer";
// import crypto from "crypto";

// dotenv.config();

// const prisma = new PrismaClient();
// const app = express();
// const PORT = 3000;
// const JWT_SECRET = process.env.JWT_SECRET || "your_secret_key";
// const JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || "your_refresh_secret";

// app.use(express.json());
// app.use(cors({ origin: "https://shanhai87.github.io" }));

// // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Access –∏ Refresh —Ç–æ–∫–µ–Ω–æ–≤
// const generateTokens = (userId) => {
//   const accessToken = jwt.sign({ id: userId }, JWT_SECRET, { expiresIn: "1h" });
//   const refreshToken = jwt.sign({ id: userId }, JWT_REFRESH_SECRET, { expiresIn: "7d" });

//   return { accessToken, refreshToken };
// };

// // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
// const registerSchema = z.object({
//   name: z.string().min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 —Å–∏–º–≤–æ–ª–∞"),
//   email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
//   password: z.string().min(6, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"),
// });

// const loginSchema = z.object({
//   email: z.string().email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email"),
//   password: z.string().min(6, "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"),
// });

// // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å Refresh-—Ç–æ–∫–µ–Ω–æ–º)
// app.post('/register', async (req, res) => {
//   const parseResult = registerSchema.safeParse(req.body);
//   if (!parseResult.success) {
//     return res.status(400).json({ error: parseResult.error.format() });
//   }

//   const { name, email, password } = parseResult.data;

//   try {
//     const existingUser = await prisma.user.findUnique({ where: { email } });
//     if (existingUser) {
//       return res.status(400).json({ error: 'Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω' });
//     }

//     const hashedPassword = await bcrypt.hash(password, 10);

//     const { accessToken, refreshToken } = generateTokens(email);

//     const newUser = await prisma.user.create({
//       data: { name, email, password: hashedPassword, refreshToken },
//     });

//     res.status(201).json({ accessToken, refreshToken, user: { id: newUser.id, name, email } });
//   } catch (error) {
//     res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
//   }
// });

// // ‚úÖ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å Refresh-—Ç–æ–∫–µ–Ω–æ–º)
// app.post('/login', async (req, res) => {
//   const parseResult = loginSchema.safeParse(req.body);
//   if (!parseResult.success) {
//     return res.status(400).json({ error: parseResult.error.format() });
//   }

//   const { email, password } = parseResult.data;

//   try {
//     const user = await prisma.user.findUnique({ where: { email } });
//     if (!user) {
//       return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
//     }

//     const isMatch = await bcrypt.compare(password, user.password);
//     if (!isMatch) {
//       return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
//     }

//     const { accessToken, refreshToken } = generateTokens(user.id);

//     // –û–±–Ω–æ–≤–ª—è–µ–º Refresh-—Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//     await prisma.user.update({
//       where: { email },
//       data: { refreshToken },
//     });

//     res.json({ accessToken, refreshToken, user: { id: user.id, name: user.name, email: user.email } });
//   } catch (error) {
//     res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞' });
//   }
// });

// app.post('/refresh', async (req, res) => {
//   const { refreshToken } = req.body;
//   if (!refreshToken) {
//     return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
//   }

//   try {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Refresh-—Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
//     const user = await prisma.user.findUnique({ where: { refreshToken } });
//     if (!user) {
//       return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
//     }

//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º Refresh-—Ç–æ–∫–µ–Ω
//     jwt.verify(refreshToken, JWT_REFRESH_SECRET, async (err, decoded) => {
//       if (err) {
//         return res.status(403).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' });
//       }

//       // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π Access-—Ç–æ–∫–µ–Ω
//       const accessToken = jwt.sign({ id: user.id }, JWT_SECRET, { expiresIn: "1h" });

//       res.json({ accessToken });
//     });
//   } catch (error) {
//     res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
//   }
// });

// app.post('/logout', async (req, res) => {
//   const { refreshToken } = req.body;

//   if (!refreshToken) {
//     return res.status(400).json({ error: "–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç" });
//   }

//   try {
//     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ Refresh-—Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
//     const user = await prisma.user.findUnique({ where: { refreshToken } });
//     if (!user) {
//       return res.status(403).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
//     }

//     // –£–¥–∞–ª—è–µ–º Refresh-—Ç–æ–∫–µ–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     await prisma.user.update({
//       where: { id: user.id },
//       data: { refreshToken: null },
//     });

//     res.json({ message: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ" });
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// });

// // üìå –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
// const transporter = nodemailer.createTransport({
//   service: "Gmail",
//   auth: {
//     user: process.env.EMAIL_USER,
//     pass: process.env.EMAIL_PASS,
//   },
// });

// // ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
// app.post('/forgot-password', async (req, res) => {
//   const { email } = req.body;

//   if (!email) {
//     return res.status(400).json({ error: "–í–≤–µ–¥–∏—Ç–µ email" });
//   }

//   try {
//     // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//     const user = await prisma.user.findUnique({ where: { email } });
//     if (!user) {
//       return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
//     }

//     // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
//     const resetToken = crypto.randomBytes(32).toString("hex");

//     // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ (–Ω–∞ 15 –º–∏–Ω—É—Ç)
//     await prisma.user.update({
//       where: { email },
//       data: { resetToken },
//     });

//     // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
//     const resetLink = `https://shanhai87.github.io/reset-password?token=${resetToken}`;

//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
//     await transporter.sendMail({
//       from: process.env.EMAIL_USER,
//       to: email,
//       subject: "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è",
//       text: `–î–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: ${resetLink}`,
//     });

//     res.json({ message: "–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" });
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// });

// app.post('/reset-password', async (req, res) => {
//   const { token, newPassword } = req.body;

//   if (!token || !newPassword) {
//     return res.status(400).json({ error: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è" });
//   }

//   try {
//     // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º
//     const user = await prisma.user.findUnique({ where: { resetToken: token } });

//     if (!user) {
//       return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —Ç–æ–∫–µ–Ω" });
//     }

//     // –•–µ—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
//     const hashedPassword = await bcrypt.hash(newPassword, 10);

//     // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏ —É–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
//     await prisma.user.update({
//       where: { id: user.id },
//       data: { password: hashedPassword, resetToken: null },
//     });

//     res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω" });
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// });

// app.patch('/update-profile', authenticateToken, async (req, res) => {
//   const { name, email, currentPassword, newPassword } = req.body;

//   try {
//     const user = await prisma.user.findUnique({
//       where: { id: req.user.id },
//     });

//     if (!user) {
//       return res.status(404).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
//     }

//     let updatedData = {};

//     // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
//     if (name) {
//       updatedData.name = name;
//     }

//     // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ email (–µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–Ω—è—Ç –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
//     if (email && email !== user.email) {
//       const existingUser = await prisma.user.findUnique({ where: { email } });
//       if (existingUser) {
//         return res.status(400).json({ error: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
//       }
//       updatedData.email = email;
//     }

//     // ‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
//     if (currentPassword && newPassword) {
//       const isMatch = await bcrypt.compare(currentPassword, user.password);
//       if (!isMatch) {
//         return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" });
//       }

//       updatedData.password = await bcrypt.hash(newPassword, 10);
//     }

//     // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
//     const updatedUser = await prisma.user.update({
//       where: { id: req.user.id },
//       data: updatedData,
//     });

//     res.json({
//       message: "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
//       user: { id: updatedUser.id, name: updatedUser.name, email: updatedUser.email },
//     });
//   } catch (error) {
//     res.status(500).json({ error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" });
//   }
// });

// // ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// app.listen(PORT, () => {
//   console.log(`Server is running on http://localhost:${PORT}`);
// });

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import authRoutes from './routes/authRoutes.js';

dotenv.config();

const app = express();
app.use(express.json());
// app.use(cors({ origin: 'https://shanhai87.github.io/board' }));

app.use('/api', authRoutes);

app.listen(3000, () => {
  console.log('Server running on http://localhost:3000');
});

